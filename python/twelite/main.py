#
# This is a sample code using "twelite" module.
#

import twelite as tw
import time

### Serial port setting
PORT = "COM9"
BAUDRATE = 115200

### Destination addresses of TWELITE-DIP slave nodes
SLAVE_1 = 0x01
SLAVE_2 = 0x02
SLAVE_3 = 0x03
SLAVE_4 = 0x04

# Test options
MEASUREMENT = True  # Performance measurement.
QUALITY = True  # Shows sequence number and LQI as well. 
LOOP_CNT = 100  # The number of looping

### Main
if __name__ == '__main__':

    info = lambda seq, lqi: ' seq number: {}, LQI: {} ({} dBm)'.format(seq, lqi, tw.lqi2dbm(lqi))
    
    with tw.MasterNode(PORT, BAUDRATE) as mn:
 
        start_time = time.time()
        
        for _ in range(LOOP_CNT):
            try:
                if MEASUREMENT:
                    data, seq, lqi  = mn.read(dst=SLAVE_1, cmd=tw.PIXELS, quality_data=True)
                else:
                    print('--- SLAVE {} ---'.format(SLAVE_1))

                    ### Read temperature data from thermistor on AMG8833
                    # Note: the sequence number is generated in MasterNode class
                    if QUALITY:
                        data, seq, lqi = mn.read(dst=SLAVE_1, cmd=tw.THERMISTOR, quality_data=True)
                        print(info(seq, lqi))
                    else:
                        data = mn.read(dst=SLAVE_1, cmd=tw.THERMISTOR)                    
                    print(' room temperature: {} degrees Celsius'.format(data))
                    print('')
                    ### Read 64 pixels data from AMG8833
                    # Note: the sequence number for SLAVE_1 is generated by GenSeq generator
                    if QUALITY:
                        data, seq, lqi  = mn.read(dst=SLAVE_1, cmd=tw.PIXELS, quality_data=True)
                        print(info(seq, lqi))
                    else:
                        data = mn.read(dst=SLAVE_1, cmd=tw.PIXELS)                        
                    print(' pixels: ', end='')
                    for d in data[:-1]:
                        print('{},'.format(str(d)), end='')
                    print('{} degrees Celsius'.format(data[-1]))
                    print('')
            except Exception as e:
                print(e)
                time.sleep(1)
            
        stop_time = time.time()
        print('Elapsed time: {:.3f} sec'.format(stop_time - start_time))
        print('Average interval: {:.1f} msec'.format((stop_time - start_time)/LOOP_CNT*1000))
